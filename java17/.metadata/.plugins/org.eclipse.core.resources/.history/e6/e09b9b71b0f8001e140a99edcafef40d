package com.sudaksha.Account.service;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.sudaksha.Account.beans.Account;
import com.sudaksha.Account.dao.AccountTransactionsDao;
import com.sudaksha.Account.exceptions.AccountNotfoundException;
import com.sudaksha.Account.exceptions.InsufficientBalanceException;

public class AccountTransactions {
	AccountTransactionsDao accountTransactionsDao=new AccountTransactionsDao();
	List<Account> accountList=accountTransactionsDao.readAllAccounts();
	public void createAccount(String customerName,double balance) {
		Account account=new Account();
		int initialAccount=10001;
		File accountsFile=new File("C:\\PA\\sudaksha\\files\\bank_system\\bankAccountsList");
		if(accountsFile.exists()) {
			List<Integer> allAccountNumber =accountList.stream()
					.map((acc)->acc.getAccountNumber())
					.collect(Collectors.toList());
			initialAccount=Collections.max(allAccountNumber)+1;
		}
		    account.setAccountNumber(initialAccount);
			account.setCustomerName(customerName);
			account.setBalance(balance);
			accountList.add(account);
			accountTransactionsDao.writeAllAccounts(accountList);
			System.out.println("Account created successfully as: "+initialAccount);
		
	}
	
public void deposit(int acno,double amount) {
	
	/*Optional<Account> acc=accountList.stream()
			.filter((account)->account.getAccountNumber()==acno)
			.map((account)->account)
			.findAny();
	acc.ifPresentOrElse(
			(account)->{
				if(account.getAccountNumber()==acno) {
					account.setBalance(account.getBalance()+amount);
					System.out.println("You deposit is done, new balance is:"+account.getBalance());
				}			
}
			, 
			()->System.out.println("Account number not found.")
			);*/
	try {
	Account account=accountList.stream()
			.filter((acc)->acc.getAccountNumber()==acno)
			.map((acc)->acc).findAny().orElseThrow(()-> new AccountNotfoundException() );
	account.setBalance(account.getBalance()+amount);
	System.out.println("You deposit is done, new balance is:"+account.getBalance());
	}catch (AccountNotfoundException e) {
		System.out.println(e.getMessage());
	}
		
	}

public void withdraw(int acno,double amount) {

	/*Optional<Account> acc=accountList.stream()
			.filter((account)->account.getAccountNumber()==acno)
			.map((account)->account)
			.findAny();
	acc.ifPresentOrElse(
			(account)->{
				if(account.getAccountNumber()==acno) {
					if(account.getBalance()<amount) {
						System.out.println("Insufficient balance to withdraw");
					}else {
					account.setBalance(account.getBalance()-amount);
					System.out.println("You withdraw is done, new balance is:"+account.getBalance());
					}
				}
				
			
}
			, 
			()->System.out.println("Account number not found.")
			);*/
	
	
	
	try {
		Account account=accountList.stream()
				.filter((acc)->acc.getAccountNumber()==acno)
				.map((acc)->acc).findAny().orElseThrow(()-> new AccountNotfoundException() );
		
		if(account.getBalance()<amount) {
			throw new InsufficientBalanceException();
		}
		
		account.setBalance(account.getBalance()-amount);
		System.out.println("You withdraw is done, new balance is:"+account.getBalance());
		
		}catch (AccountNotfoundException | InsufficientBalanceException e) {
			System.out.println(e.getMessage());
		}
	
	
	
}


public void checkBalance(int acno) {
	
	try {
		Account account=accountList.stream()
				.filter((acc)->acc.getAccountNumber()==acno)
				.map((acc)->acc).findAny().orElseThrow(()-> new AccountNotfoundException() );
		System.out.println("Your balance is:"+account.getBalance());
		
		}catch (AccountNotfoundException | InsufficientBalanceException e) {
			System.out.println(e.getMessage());
		}
	
}

}
